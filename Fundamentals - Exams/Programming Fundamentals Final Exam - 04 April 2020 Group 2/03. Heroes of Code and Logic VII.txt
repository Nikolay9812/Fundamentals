using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Demo
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());

            Dictionary<string, List<int>> dataBase = new Dictionary<string, List<int>>();

            for (int i = 0; i < n; i++)
            {
                string[] heroes = Console.ReadLine().Split().ToArray();

                string name = heroes[0];
                int health = int.Parse(heroes[1]);
                int mana = int.Parse(heroes[2]);

                if (!dataBase.ContainsKey(name))
                {
                    dataBase.Add(name, new List<int>());
                    dataBase[name].Add(health);
                    dataBase[name].Add(mana);
                }
            }

            string command;

            while ((command = Console.ReadLine()) != "End")
            {
                string[] element = command.Split(" - ");

                if (element[0] == "CastSpell")
                {
                    string heroName = element[1];
                    int manaNeeded = int.Parse(element[2]);
                    string spellName = element[3];

                    if (dataBase[heroName][1] - manaNeeded >= 0)
                    {
                        dataBase[heroName][1] -= manaNeeded;
                        Console.WriteLine($"{heroName} has successfully cast {spellName} and now has {dataBase[heroName][1]} MP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} does not have enough MP to cast {spellName}!");
                    }
                }
                else if (element[0] == "TakeDamage")
                {
                    string heroName = element[1];
                    int damage = int.Parse(element[2]);
                    string attacker = element[3];

                    if (dataBase[heroName][0] - damage > 0)
                    {
                        dataBase[heroName][0] -= damage;

                        Console.WriteLine($"{heroName} was hit for {damage} HP by {attacker} and now has {dataBase[heroName][0]} HP left!");
                    }
                    else
                    {
                        dataBase.Remove(heroName);
                        Console.WriteLine($"{heroName} has been killed by {attacker}!");
                    }
                }
                else if (element[0] == "Recharge")
                {
                    string heroName = element[1];
                    int amount = int.Parse(element[2]);

                    if (dataBase[heroName][1] + amount <= 200)
                    {
                        dataBase[heroName][1] += amount;
                        Console.WriteLine($"{heroName} recharged for {amount} MP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} recharged for {200 - dataBase[heroName][1]} MP!");
                        dataBase[heroName][1] = 200;
                    }

                }
                else if (element[0] == "Heal")
                {
                    string heroName = element[1];
                    int amount = int.Parse(element[2]);

                    if (dataBase[heroName][0] + amount <= 100)
                    {
                        dataBase[heroName][0] += amount;
                        Console.WriteLine($"{heroName} healed for {amount} HP!");
                    }
                    else
                    {
                        Console.WriteLine($"{heroName} healed for {100 - dataBase[heroName][0]} HP!");
                        dataBase[heroName][0] = 100;
                    }
                }

            }
            foreach (var kvp in dataBase.OrderByDescending(v => v.Value[0]).ThenBy(k => k.Key))
            {
                Console.WriteLine(kvp.Key);
                Console.WriteLine($" HP: {kvp.Value[0]}");
                Console.WriteLine($" MP: {kvp.Value[1]}");
            }
        }
    }
}